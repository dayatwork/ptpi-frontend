/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TwoFactorImport } from './routes/two-factor'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as SignInImport } from './routes/sign-in'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as ForgetPasswordImport } from './routes/forget-password'
import { Route as AppImport } from './routes/app'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as TwoFactorOtpImport } from './routes/two-factor_.otp'
import { Route as AppUpcomingEventsImport } from './routes/app/upcoming-events'
import { Route as AppPreviousEventsImport } from './routes/app/previous-events'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminSponsorshipsImport } from './routes/admin/sponsorships'
import { Route as AdminSeminarsImport } from './routes/admin/seminars'
import { Route as AdminInstitutionsImport } from './routes/admin/institutions'
import { Route as AdminExhibitionsImport } from './routes/admin/exhibitions'
import { Route as AdminEventsImport } from './routes/admin/events'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminConsultationsImport } from './routes/admin/consultations'
import { Route as AdminEventsIdImport } from './routes/admin/events_.$id'
import { Route as AdminEventsIdSeminarsSeminarIdImport } from './routes/admin/events_.$id.seminars.$seminarId'

// Create/Update Routes

const TwoFactorRoute = TwoFactorImport.update({
  id: '/two-factor',
  path: '/two-factor',
  getParentRoute: () => rootRoute,
} as any)

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const ForgetPasswordRoute = ForgetPasswordImport.update({
  id: '/forget-password',
  path: '/forget-password',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const TwoFactorOtpRoute = TwoFactorOtpImport.update({
  id: '/two-factor_/otp',
  path: '/two-factor/otp',
  getParentRoute: () => rootRoute,
} as any)

const AppUpcomingEventsRoute = AppUpcomingEventsImport.update({
  id: '/upcoming-events',
  path: '/upcoming-events',
  getParentRoute: () => AppRoute,
} as any)

const AppPreviousEventsRoute = AppPreviousEventsImport.update({
  id: '/previous-events',
  path: '/previous-events',
  getParentRoute: () => AppRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSponsorshipsRoute = AdminSponsorshipsImport.update({
  id: '/sponsorships',
  path: '/sponsorships',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSeminarsRoute = AdminSeminarsImport.update({
  id: '/seminars',
  path: '/seminars',
  getParentRoute: () => AdminRoute,
} as any)

const AdminInstitutionsRoute = AdminInstitutionsImport.update({
  id: '/institutions',
  path: '/institutions',
  getParentRoute: () => AdminRoute,
} as any)

const AdminExhibitionsRoute = AdminExhibitionsImport.update({
  id: '/exhibitions',
  path: '/exhibitions',
  getParentRoute: () => AdminRoute,
} as any)

const AdminEventsRoute = AdminEventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AdminRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

const AdminConsultationsRoute = AdminConsultationsImport.update({
  id: '/consultations',
  path: '/consultations',
  getParentRoute: () => AdminRoute,
} as any)

const AdminEventsIdRoute = AdminEventsIdImport.update({
  id: '/events_/$id',
  path: '/events/$id',
  getParentRoute: () => AdminRoute,
} as any)

const AdminEventsIdSeminarsSeminarIdRoute =
  AdminEventsIdSeminarsSeminarIdImport.update({
    id: '/seminars/$seminarId',
    path: '/seminars/$seminarId',
    getParentRoute: () => AdminEventsIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/forget-password': {
      id: '/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof ForgetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/two-factor': {
      id: '/two-factor'
      path: '/two-factor'
      fullPath: '/two-factor'
      preLoaderRoute: typeof TwoFactorImport
      parentRoute: typeof rootRoute
    }
    '/admin/consultations': {
      id: '/admin/consultations'
      path: '/consultations'
      fullPath: '/admin/consultations'
      preLoaderRoute: typeof AdminConsultationsImport
      parentRoute: typeof AdminImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof AdminImport
    }
    '/admin/events': {
      id: '/admin/events'
      path: '/events'
      fullPath: '/admin/events'
      preLoaderRoute: typeof AdminEventsImport
      parentRoute: typeof AdminImport
    }
    '/admin/exhibitions': {
      id: '/admin/exhibitions'
      path: '/exhibitions'
      fullPath: '/admin/exhibitions'
      preLoaderRoute: typeof AdminExhibitionsImport
      parentRoute: typeof AdminImport
    }
    '/admin/institutions': {
      id: '/admin/institutions'
      path: '/institutions'
      fullPath: '/admin/institutions'
      preLoaderRoute: typeof AdminInstitutionsImport
      parentRoute: typeof AdminImport
    }
    '/admin/seminars': {
      id: '/admin/seminars'
      path: '/seminars'
      fullPath: '/admin/seminars'
      preLoaderRoute: typeof AdminSeminarsImport
      parentRoute: typeof AdminImport
    }
    '/admin/sponsorships': {
      id: '/admin/sponsorships'
      path: '/sponsorships'
      fullPath: '/admin/sponsorships'
      preLoaderRoute: typeof AdminSponsorshipsImport
      parentRoute: typeof AdminImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/app/previous-events': {
      id: '/app/previous-events'
      path: '/previous-events'
      fullPath: '/app/previous-events'
      preLoaderRoute: typeof AppPreviousEventsImport
      parentRoute: typeof AppImport
    }
    '/app/upcoming-events': {
      id: '/app/upcoming-events'
      path: '/upcoming-events'
      fullPath: '/app/upcoming-events'
      preLoaderRoute: typeof AppUpcomingEventsImport
      parentRoute: typeof AppImport
    }
    '/two-factor_/otp': {
      id: '/two-factor_/otp'
      path: '/two-factor/otp'
      fullPath: '/two-factor/otp'
      preLoaderRoute: typeof TwoFactorOtpImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/admin/events_/$id': {
      id: '/admin/events_/$id'
      path: '/events/$id'
      fullPath: '/admin/events/$id'
      preLoaderRoute: typeof AdminEventsIdImport
      parentRoute: typeof AdminImport
    }
    '/admin/events_/$id/seminars/$seminarId': {
      id: '/admin/events_/$id/seminars/$seminarId'
      path: '/seminars/$seminarId'
      fullPath: '/admin/events/$id/seminars/$seminarId'
      preLoaderRoute: typeof AdminEventsIdSeminarsSeminarIdImport
      parentRoute: typeof AdminEventsIdImport
    }
  }
}

// Create and export the route tree

interface AdminEventsIdRouteChildren {
  AdminEventsIdSeminarsSeminarIdRoute: typeof AdminEventsIdSeminarsSeminarIdRoute
}

const AdminEventsIdRouteChildren: AdminEventsIdRouteChildren = {
  AdminEventsIdSeminarsSeminarIdRoute: AdminEventsIdSeminarsSeminarIdRoute,
}

const AdminEventsIdRouteWithChildren = AdminEventsIdRoute._addFileChildren(
  AdminEventsIdRouteChildren,
)

interface AdminRouteChildren {
  AdminConsultationsRoute: typeof AdminConsultationsRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminEventsRoute: typeof AdminEventsRoute
  AdminExhibitionsRoute: typeof AdminExhibitionsRoute
  AdminInstitutionsRoute: typeof AdminInstitutionsRoute
  AdminSeminarsRoute: typeof AdminSeminarsRoute
  AdminSponsorshipsRoute: typeof AdminSponsorshipsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminEventsIdRoute: typeof AdminEventsIdRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminConsultationsRoute: AdminConsultationsRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminEventsRoute: AdminEventsRoute,
  AdminExhibitionsRoute: AdminExhibitionsRoute,
  AdminInstitutionsRoute: AdminInstitutionsRoute,
  AdminSeminarsRoute: AdminSeminarsRoute,
  AdminSponsorshipsRoute: AdminSponsorshipsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminEventsIdRoute: AdminEventsIdRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AppRouteChildren {
  AppPreviousEventsRoute: typeof AppPreviousEventsRoute
  AppUpcomingEventsRoute: typeof AppUpcomingEventsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppPreviousEventsRoute: AppPreviousEventsRoute,
  AppUpcomingEventsRoute: AppUpcomingEventsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/forget-password': typeof ForgetPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/two-factor': typeof TwoFactorRoute
  '/admin/consultations': typeof AdminConsultationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/events': typeof AdminEventsRoute
  '/admin/exhibitions': typeof AdminExhibitionsRoute
  '/admin/institutions': typeof AdminInstitutionsRoute
  '/admin/seminars': typeof AdminSeminarsRoute
  '/admin/sponsorships': typeof AdminSponsorshipsRoute
  '/admin/users': typeof AdminUsersRoute
  '/app/previous-events': typeof AppPreviousEventsRoute
  '/app/upcoming-events': typeof AppUpcomingEventsRoute
  '/two-factor/otp': typeof TwoFactorOtpRoute
  '/admin/': typeof AdminIndexRoute
  '/app/': typeof AppIndexRoute
  '/admin/events/$id': typeof AdminEventsIdRouteWithChildren
  '/admin/events/$id/seminars/$seminarId': typeof AdminEventsIdSeminarsSeminarIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forget-password': typeof ForgetPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/two-factor': typeof TwoFactorRoute
  '/admin/consultations': typeof AdminConsultationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/events': typeof AdminEventsRoute
  '/admin/exhibitions': typeof AdminExhibitionsRoute
  '/admin/institutions': typeof AdminInstitutionsRoute
  '/admin/seminars': typeof AdminSeminarsRoute
  '/admin/sponsorships': typeof AdminSponsorshipsRoute
  '/admin/users': typeof AdminUsersRoute
  '/app/previous-events': typeof AppPreviousEventsRoute
  '/app/upcoming-events': typeof AppUpcomingEventsRoute
  '/two-factor/otp': typeof TwoFactorOtpRoute
  '/admin': typeof AdminIndexRoute
  '/app': typeof AppIndexRoute
  '/admin/events/$id': typeof AdminEventsIdRouteWithChildren
  '/admin/events/$id/seminars/$seminarId': typeof AdminEventsIdSeminarsSeminarIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/forget-password': typeof ForgetPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/two-factor': typeof TwoFactorRoute
  '/admin/consultations': typeof AdminConsultationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/events': typeof AdminEventsRoute
  '/admin/exhibitions': typeof AdminExhibitionsRoute
  '/admin/institutions': typeof AdminInstitutionsRoute
  '/admin/seminars': typeof AdminSeminarsRoute
  '/admin/sponsorships': typeof AdminSponsorshipsRoute
  '/admin/users': typeof AdminUsersRoute
  '/app/previous-events': typeof AppPreviousEventsRoute
  '/app/upcoming-events': typeof AppUpcomingEventsRoute
  '/two-factor_/otp': typeof TwoFactorOtpRoute
  '/admin/': typeof AdminIndexRoute
  '/app/': typeof AppIndexRoute
  '/admin/events_/$id': typeof AdminEventsIdRouteWithChildren
  '/admin/events_/$id/seminars/$seminarId': typeof AdminEventsIdSeminarsSeminarIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/app'
    | '/forget-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/admin/consultations'
    | '/admin/dashboard'
    | '/admin/events'
    | '/admin/exhibitions'
    | '/admin/institutions'
    | '/admin/seminars'
    | '/admin/sponsorships'
    | '/admin/users'
    | '/app/previous-events'
    | '/app/upcoming-events'
    | '/two-factor/otp'
    | '/admin/'
    | '/app/'
    | '/admin/events/$id'
    | '/admin/events/$id/seminars/$seminarId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forget-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/admin/consultations'
    | '/admin/dashboard'
    | '/admin/events'
    | '/admin/exhibitions'
    | '/admin/institutions'
    | '/admin/seminars'
    | '/admin/sponsorships'
    | '/admin/users'
    | '/app/previous-events'
    | '/app/upcoming-events'
    | '/two-factor/otp'
    | '/admin'
    | '/app'
    | '/admin/events/$id'
    | '/admin/events/$id/seminars/$seminarId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/app'
    | '/forget-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/admin/consultations'
    | '/admin/dashboard'
    | '/admin/events'
    | '/admin/exhibitions'
    | '/admin/institutions'
    | '/admin/seminars'
    | '/admin/sponsorships'
    | '/admin/users'
    | '/app/previous-events'
    | '/app/upcoming-events'
    | '/two-factor_/otp'
    | '/admin/'
    | '/app/'
    | '/admin/events_/$id'
    | '/admin/events_/$id/seminars/$seminarId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
  ForgetPasswordRoute: typeof ForgetPasswordRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  TwoFactorRoute: typeof TwoFactorRoute
  TwoFactorOtpRoute: typeof TwoFactorOtpRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AppRoute: AppRouteWithChildren,
  ForgetPasswordRoute: ForgetPasswordRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  TwoFactorRoute: TwoFactorRoute,
  TwoFactorOtpRoute: TwoFactorOtpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/app",
        "/forget-password",
        "/reset-password",
        "/sign-in",
        "/sign-up",
        "/two-factor",
        "/two-factor_/otp"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/consultations",
        "/admin/dashboard",
        "/admin/events",
        "/admin/exhibitions",
        "/admin/institutions",
        "/admin/seminars",
        "/admin/sponsorships",
        "/admin/users",
        "/admin/",
        "/admin/events_/$id"
      ]
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/previous-events",
        "/app/upcoming-events",
        "/app/"
      ]
    },
    "/forget-password": {
      "filePath": "forget-password.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/two-factor": {
      "filePath": "two-factor.tsx"
    },
    "/admin/consultations": {
      "filePath": "admin/consultations.tsx",
      "parent": "/admin"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx",
      "parent": "/admin"
    },
    "/admin/events": {
      "filePath": "admin/events.tsx",
      "parent": "/admin"
    },
    "/admin/exhibitions": {
      "filePath": "admin/exhibitions.tsx",
      "parent": "/admin"
    },
    "/admin/institutions": {
      "filePath": "admin/institutions.tsx",
      "parent": "/admin"
    },
    "/admin/seminars": {
      "filePath": "admin/seminars.tsx",
      "parent": "/admin"
    },
    "/admin/sponsorships": {
      "filePath": "admin/sponsorships.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx",
      "parent": "/admin"
    },
    "/app/previous-events": {
      "filePath": "app/previous-events.tsx",
      "parent": "/app"
    },
    "/app/upcoming-events": {
      "filePath": "app/upcoming-events.tsx",
      "parent": "/app"
    },
    "/two-factor_/otp": {
      "filePath": "two-factor_.otp.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/admin/events_/$id": {
      "filePath": "admin/events_.$id.tsx",
      "parent": "/admin",
      "children": [
        "/admin/events_/$id/seminars/$seminarId"
      ]
    },
    "/admin/events_/$id/seminars/$seminarId": {
      "filePath": "admin/events_.$id.seminars.$seminarId.tsx",
      "parent": "/admin/events_/$id"
    }
  }
}
ROUTE_MANIFEST_END */
